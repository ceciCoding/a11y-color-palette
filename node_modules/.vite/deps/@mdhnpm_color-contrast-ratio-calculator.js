import {
  __commonJS
} from "./chunk-RSJERJUL.js";

// node_modules/@mdhnpm/rgb-hex-converter/dist/convertHexToRgb.js
var require_convertHexToRgb = __commonJS({
  "node_modules/@mdhnpm/rgb-hex-converter/dist/convertHexToRgb.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.convertHexToRgb = void 0;
    var convertHexToRgb = (hex) => {
      const sanitisedHex = hex.replace("#", "").toLowerCase();
      if (validateHexString(sanitisedHex)) {
        const chars = [...sanitisedHex];
        return [
          parseInt(chars[0] + chars[1], 16),
          parseInt(chars[2] + chars[3], 16),
          parseInt(chars[4] + chars[5], 16)
        ];
      } else {
        throw new Error("Invalid HEX input");
      }
    };
    exports.convertHexToRgb = convertHexToRgb;
    var validateHexString = (hex) => {
      const regex = new RegExp(/[0-9a-f]{6}/);
      if (hex.length === 6 || regex.test(hex)) {
        return true;
      }
      return false;
    };
  }
});

// node_modules/@mdhnpm/rgb-hex-converter/dist/convertRgbToHex.js
var require_convertRgbToHex = __commonJS({
  "node_modules/@mdhnpm/rgb-hex-converter/dist/convertRgbToHex.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.convertRgbToHex = void 0;
    var convertRgbToHex = (red, green, blue) => {
      if (isValidRgb(red, green, blue)) {
        return returnHex(red) + returnHex(green) + returnHex(blue);
      } else {
        throw new Error("Invalid RGB input");
      }
    };
    exports.convertRgbToHex = convertRgbToHex;
    var isValidRgb = (red, green, blue) => {
      if (!isValidNumber(red) || !isValidNumber(green) || !isValidNumber(blue)) {
        return false;
      }
      return true;
    };
    var isValidNumber = (value) => {
      if (value > 255 || value < 0) {
        return false;
      }
      return true;
    };
    var returnHex = (value) => {
      if (value < 10) {
        return "0" + value.toString(16);
      } else {
        return value.toString(16);
      }
    };
  }
});

// node_modules/@mdhnpm/rgb-hex-converter/dist/index.js
var require_dist = __commonJS({
  "node_modules/@mdhnpm/rgb-hex-converter/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.convertRgbToHex = exports.convertHexToRgb = void 0;
    var convertHexToRgb_1 = require_convertHexToRgb();
    Object.defineProperty(exports, "convertHexToRgb", { enumerable: true, get: function() {
      return convertHexToRgb_1.convertHexToRgb;
    } });
    var convertRgbToHex_1 = require_convertRgbToHex();
    Object.defineProperty(exports, "convertRgbToHex", { enumerable: true, get: function() {
      return convertRgbToHex_1.convertRgbToHex;
    } });
  }
});

// node_modules/@mdhnpm/color-contrast-ratio-calculator/dist/colorContrastRatioCalculator.js
var require_colorContrastRatioCalculator = __commonJS({
  "node_modules/@mdhnpm/color-contrast-ratio-calculator/dist/colorContrastRatioCalculator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.colorContrastRatioCalculator = void 0;
    var rgb_hex_converter_1 = require_dist();
    var colorContrastRatioCalculator = (foregroundColor, backgroundColor) => {
      const l1 = calculateRelativeLuminance(foregroundColor);
      const l2 = calculateRelativeLuminance(backgroundColor);
      if (l2 < l1) {
        const ratio = (l1 + 0.05) / (l2 + 0.05);
        return Math.round(ratio * 100) / 100;
      } else {
        const ratio = (l2 + 0.05) / (l1 + 0.05);
        return Math.round(ratio * 100) / 100;
      }
    };
    exports.colorContrastRatioCalculator = colorContrastRatioCalculator;
    var calculateRelativeLuminanceComponent1 = (rgbValue) => {
      const relativeRgb = rgbValue / 255;
      if (relativeRgb <= 0.03928) {
        return relativeRgb / 12.92;
      }
      return Math.pow((relativeRgb + 0.055) / 1.055, 2.4);
    };
    var calculateRelativeLuminanceComponent2 = (input) => {
      return 0.2126 * calculateRelativeLuminanceComponent1(input[0]) + 0.7152 * calculateRelativeLuminanceComponent1(input[1]) + 0.0722 * calculateRelativeLuminanceComponent1(input[2]);
    };
    var calculateRelativeLuminance = (input) => {
      if (Array.isArray(input) && input.length === 3) {
        return calculateRelativeLuminanceComponent2(input);
      } else if (typeof input === "string") {
        const rgb = rgb_hex_converter_1.convertHexToRgb(input);
        return calculateRelativeLuminanceComponent2(rgb);
      } else {
        throw new Error("Input must be array of number or string");
      }
    };
  }
});

// node_modules/@mdhnpm/color-contrast-ratio-calculator/dist/index.js
var require_dist2 = __commonJS({
  "node_modules/@mdhnpm/color-contrast-ratio-calculator/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.colorContrastRatioCalculator = void 0;
    var colorContrastRatioCalculator_1 = require_colorContrastRatioCalculator();
    Object.defineProperty(exports, "colorContrastRatioCalculator", { enumerable: true, get: function() {
      return colorContrastRatioCalculator_1.colorContrastRatioCalculator;
    } });
  }
});

// dep:@mdhnpm_color-contrast-ratio-calculator
var mdhnpm_color_contrast_ratio_calculator_default = require_dist2();
export {
  mdhnpm_color_contrast_ratio_calculator_default as default
};
//# sourceMappingURL=@mdhnpm_color-contrast-ratio-calculator.js.map

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.colorContrastRatioCalculator = void 0;
const rgb_hex_converter_1 = require("@mdhnpm/rgb-hex-converter");
const colorContrastRatioCalculator = (foregroundColor, backgroundColor) => {
    const l1 = calculateRelativeLuminance(foregroundColor);
    const l2 = calculateRelativeLuminance(backgroundColor);
    if (l2 < l1) {
        const ratio = (l1 + 0.05) / (l2 + 0.05);
        return Math.round((ratio * 100)) / 100;
    }
    else {
        const ratio = (l2 + 0.05) / (l1 + 0.05);
        return Math.round((ratio * 100)) / 100;
    }
};
exports.colorContrastRatioCalculator = colorContrastRatioCalculator;
const calculateRelativeLuminanceComponent1 = (rgbValue) => {
    const relativeRgb = rgbValue / 255;
    if (relativeRgb <= 0.03928) {
        return relativeRgb / 12.92;
    }
    return Math.pow(((relativeRgb + 0.055) / 1.055), 2.4);
};
const calculateRelativeLuminanceComponent2 = (input) => {
    return 0.2126 * calculateRelativeLuminanceComponent1(input[0])
        + 0.7152 * calculateRelativeLuminanceComponent1(input[1])
        + 0.0722 * calculateRelativeLuminanceComponent1(input[2]);
};
const calculateRelativeLuminance = (input) => {
    if (Array.isArray(input) && input.length === 3) {
        return calculateRelativeLuminanceComponent2(input);
    }
    else if (typeof input === 'string') {
        const rgb = rgb_hex_converter_1.convertHexToRgb(input);
        return calculateRelativeLuminanceComponent2(rgb);
    }
    else {
        throw new Error('Input must be array of number or string');
    }
};
//# sourceMappingURL=colorContrastRatioCalculator.js.map